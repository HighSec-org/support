# HighSec.org GetSSL script
# The staging server is best for testing (hence set as default)
#CA="https://acme-staging-v02.api.letsencrypt.org"
# This server issues full certificates, however has rate limits
CA="https://acme-v02.api.letsencrypt.org"

# openssl config file.  The default should work in most cases.
#SSLCONF="/etc/ssl/openssl.cnf"
# Subject Alternative Name: The default is blank, but can be any list of alternate domains you want on the same certificate
#SANS="sub.highsec.org,"
#SANS+="sub.domain2.com,"
#SANS+="sub.domain3.com" 

# The default is to use HTTP / HTTPS to challenge / validate ownership. setting this variable to "true" will use the DNS-01 challenge
VALIDATE_VIA_DNS="true"
# The script of command used to add a DNS challenge ( it will be passed the domain name and the challenge text as two arguments)
DNS_ADD_COMMAND="~/.getssl/dns_add_cloudflare.sh"
# The script of command used to remove a DNS challenge ( it will be passed the domain name and the challenge text as two arguments)
DNS_DEL_COMMAND="~/.getssl/dns_del_cloudflare.sh"
# The time period to wait, after the internal checks of DNS server have returned the correct value, before asking the ACME server to verify the tokens are correct. Default=0
DNS_EXTRA_WAIT=5
# The time period in seconds the systems waits before rechecking the DNS token. Default=10
DNS_WAIT=10

# The authoritative DNS server for the domain, for use where you want to force it to a specific value 
# rather than for nslookup try to determine the authoritative nameserver for the domain.
#AUTH_DNS_SERVER=""
# By default the script checks one authoritative DNS server, and assumes that all are in sync. 
# If you want it to check all the DNS servers set true
# CHECK_ALL_AUTH_DNS="false"

# If set this adds additional options to the ssh command 
# used to upload the response to challenges, e.g. to specify a non-standard port or an identify file. 
#SSH_OPTS="-p 1234 -i identity_file"

# Acme Challenge Location. The first line for the domain, the following ones for each additional domain.
# If these start with ssh: then the next variable is assumed to be the hostname and the rest the location.
# An ssh key will be needed to provide you with access to the remote server.
# Optionally, you can specify a different userid for ssh/scp to use on the remote server before the @ sign.
# If left blank, the username on the local server will be used to authenticate against the remote server.
# If these start with ftp: then the next variables are ftpuserid:ftppassword:servername:ACL_location
# These should be of the form "/path/to/your/website/folder/.well-known/acme-challenge"
# where "/path/to/your/website/folder/" is the path, on your web server, to the web root for your domain.
#ACL=('/var/www/${DOMAIN}/web/.well-known/acme-challenge'
#     'ssh:server5:/var/www/${DOMAIN}/web/.well-known/acme-challenge'
#     'ssh:sshuserid@server5:/var/www/${DOMAIN}/web/.well-known/acme-challenge'
#     'ftp:ftpuserid:ftppassword:${DOMAIN}:/web/.well-known/acme-challenge')
#ACL=('/var/www/example.com/public_html/.well-known/acme-challenge')
#ACL=('ssh:sshuserid@de04.highsec.lol:/home/${DOMAIN}/public_html/.well-known/acme-challenge')

# The command needed to reload apache / nginx or whatever you use.
# Several (ssh) commands may be given using a bash array:
# RELOAD_CMD=('ssh:sshuserid@server5:systemctl reload httpd' 'logger getssl for server5 efficient.')
# RELOAD_CMD="service apache2 reload"

# Defines the default CA server that is used for revoking certificates, if you don't specify the CA on the command line.
DEFAULT_REVOKE_CA="https://acme-v01.api.letsencrypt.org"

# If blank, then no file is copied, the original will be stored in 
# ~/.getssl/example.com/example.com.key by default (where example.com is the main domain for this certificate)
# Location for all your certs, these can either be on the server (so full path name) or using ssh as for the ACL
#DOMAIN_CERT_LOCATION="ssh:server5:/etc/ssl/domain.crt"
#DOMAIN_KEY_LOCATION="ssh:server5:/etc/ssl/domain.key"
# This is a single file with both the private key and domain certificate
# DOMAIN_KEY_CERT_LOCATION=""
#CA_CERT_LOCATION="/etc/ssl/chain.crt"
#DOMAIN_CHAIN_LOCATION="" # this is the domain cert and CA cert
#DOMAIN_PEM_LOCATION="" 

# Domain key length. 4096 is the default, and max currently supported by LetsEncrypt. 
# This is only used for RSA keys. By default the existing key is used, so delete any existing key if you change this value 
# ( or set REUSE_PRIVATE_KEY="false" )
DOMAIN_KEY_LENGTH=4096

# By default private keys are kept, this can make it easier for those using Key pinning security measures. 
# You can set REUSE_PRIVATE_KEY="false" to renew the key for every certificate if you prefer though.
REUSE_PRIVATE_KEY="true"

# The directory below which all domain config and certificates etc are stored. Each certificate will have a folder based on
# primary domain within this directory.
DOMAIN_STORAGE=~/.getssl

# If DUAL_RSA_ECDSA is set to "true" then two certificates will be obtained. One using an RSA key, and the other using 
# whatever key is defined by PRIVATE_KEY_ALG. 
# You can then have a web server which uses both an RSA and Elliptic curve certificate.
DUAL_RSA_ECDSA="true"
# The algorithm used for the domain key. "rsa", "prime256v1", "secp384r1" and "secp521r1" are supported by GetSSL.
#PRIVATE_KEY_ALG="rsa"
PRIVATE_KEY_ALG="secp384r1"
# If a period of time is needed between uploading the token, and checking that it is correctly deployed then a wait time ( in seconds) can be defined.
HTTP_TOKEN_CHECK_WAIT=3
# If set to true, then the name of the "main domain" which would normally be the directory name, is not used on the certificate. 
# For example you might want to create folders "group1", "group2" etc for certificates, which can be done using this option.
IGNORE_DIRECTORY_DOMAIN="false"
# Setting this to "true" will add the flag to the CSR / certificate to set a flag which instructs the browser that 
# the certificate must be served with a valid OCSP response or the browser should hard fail on the connection
OCSP_MUST_STAPLE="false"
# If you have a certificate that should only be renewed interactively, then set PREVENT_NON_INTERACTIVE_RENEWAL="true". I.e. you have a domain which you don't want to leave the server keys active, or isn't always online, or requires some manual intervention. This enables the certificate to only be checked when run via cron ( say with the -a option ) but can then be run interactively with the same -a option and it will be renewed.
PREVENT_NON_INTERACTIVE_RENEWAL="false"
# The DNS server to be used, if you want anything other than the computers default DNS server to be used. 
# If your default DNS server is internal to the network, and you need to force usage of an external DNS server.
#PUBLIC_DNS_SERVER=""

# The number of days left on a certificate before the script will allow you to renew. 
# Keeping this at something likes 30 days helps prevent you asking for certificates repeatedly ( due to an error somewhere) 
# and hitting rate limits. 30 days also gives plenty of time to still renew if there are any issues.
RENEW_ALLOW="30"

# Define the server type. This can be https, ftp, ftpi, imap, imaps, pop3, pop3s, smtp,
# smtps_deprecated, smtps, smtp_submission, xmpp, xmpps, ldaps or a port number which
# will be checked for certificate expiry and also will be checked after
# an update to confirm correct certificate is running (if CHECK_REMOTE) is set to true
#SERVER_TYPE="https"
#CHECK_REMOTE="true"
# Used when defining your own SERVER_TYPE for CHECK_REMOTE
#REMOTE_EXTRA=""

AGREEMENT="https://letsencrypt.org/documents/LE-SA-v1.0.1-July-27-2015.pdf"
# Set an email address associated with your account - generally set at account level rather than domain.
ACCOUNT_EMAIL="support@highsec.org"
ACCOUNT_KEY_LENGTH=4096
# GetSSL also supports prime256v1, secp384r1 and secp521r1 EC keys.
ACCOUNT_KEY_TYPE="rsa"
# If the account key does not already exist, it will be created.
ACCOUNT_KEY="/$HOME/.getssl/account.key"
